/**
 * \file ClientTesteur.cpp
 * \brief
 * \author etudiant
 * \date 2018-04-09
 */

#include <gtest/gtest.h>
#include "Client.h"
using namespace banque;
/**
 * \test Test du constructeur
 */
TEST(Client, constructeurAvecParametresValides){
	Client client(1234, "Deblois", "Olivier", "418 999-9999", util::Date(04,05,1992));
	ASSERT_EQ(1234, client.reqNoFolio());
	ASSERT_EQ("Olivier", client.reqPrenom());
	ASSERT_EQ("Deblois", client.reqNom());
	ASSERT_EQ("418 999-9999", client.reqTelephone());
	ASSERT_EQ("Lundi le 04 mai 1992", client.reqDateDeNaissance().reqDateFormatee());
}
TEST(CLient, constructeurAvecParametresNonValides){
	ASSERT_THROW(Client client(100, "Deblois", "Olivier", "418 999-9999", util::Date(04,05,1992)), PreconditionException);
	ASSERT_THROW(Client client(1234, "Deblois4545", "Olivier", "418 999-9999", util::Date(04,05,1992)), PreconditionException);
	ASSERT_THROW(Client client(1234, "Deblois", "Olivie34r", "418 999-9999", util::Date(04,05,1992)), PreconditionException);
	ASSERT_THROW(Client client(1234, "", "", "418 999-9999", util::Date(04,05,1992)), PreconditionException);
	ASSERT_THROW(Client client(1234, "Deblois", "Olivier", "418999-9999", util::Date(04,05,1992)), PreconditionException);
}

/**
 * \brief Creation d'une fixture a utiliser pour les methodes public de la class de test
 */

class unClient: public ::testing::Test{
public:
	unClient():
		client(1234, "Deblois", "Olivier", "418 999-9999", util::Date(04,05,1992))
	{}
	Client client;
};

TEST_F(unClient, reqNoFolio){
	ASSERT_EQ(1234, client.reqNoFolio());
}
TEST_F(unClient, reqNom){
	ASSERT_EQ("Deblois", client.reqNom());
}
TEST_F(unClient, reqPrenom){
	ASSERT_EQ("Olivier", client.reqPrenom());
}
TEST_F(unClient, reqTelephone){
	ASSERT_EQ("418 999-9999", client.reqTelephone());
}
TEST_F(unClient, reqDateNaissance){
	ASSERT_EQ("Lundi le 04 mai 1992", client.reqDateDeNaissance().reqDateFormatee());
}

/**
 * test asg telephone valide
 */
TEST_F(unClient, asgTelephone){
	client.asgTelephone("418 988-8888");
	ASSERT_EQ("418 988-8888",client.reqTelephone());
}
/**
 * test asg telephone Non valide
 */
TEST_F(unClient, asgTelephoneNonValide){
	ASSERT_THROW(client.asgTelephone("4189888888"), PreconditionException);
}

TEST_F(unClient, reqReleves){
	ASSERT_EQ("lol", client.reqReleves());
}








