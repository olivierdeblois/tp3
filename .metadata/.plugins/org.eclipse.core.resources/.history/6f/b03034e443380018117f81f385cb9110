/**
 * \file CompteTesteur.cpp
 * \brief
 * \author etudiant
 * \date 2018-03-30
 */

#include <gtest/gtest.h>

#include "Client.h"

/**
 * \test Test du constructeur
 * 		Cas valide: Creation d'un objet compte et verification de l'assignation de tous les attributs
 * 		Cas invalides:
 * 			noCompte < 0
 * 			description vide
 */


TEST(Compte, ConstructeurAvecParametresValides){ // test un format valide de compte
	Compte unCompte(1234, 3.2, 1500, "cheque");
	ASSERT_EQ(1234, unCompte.reqNoCompte());
	ASSERT_EQ(3.2, unCompte.reqTauxInteret());
	ASSERT_EQ(1500, unCompte.reqSolde());
	ASSERT_EQ("cheque", unCompte.reqDescription());
	//ASSERT_EQ(util::Date(), unCompte.reqDateOuverture());

}
//Cas invalide
TEST(Compte, ConstructeurAvecNoCompteNonValides){    // test le numero de compte < que 0
	ASSERT_THROW(Compte unCompte(-1, 3.2, 1500, "cheque"), ContratException);
}
//Cas invalide
TEST(Compte, ConstructeurAvecDescriptionNonValides){  // test la description vide
	ASSERT_THROW(Compte unCompte(1234, 3.2, 1500, ""), ContratException);
}

/**
 * \brief Creation d'une fixture a utiliser pour les methodes public de la class de test
 */

class unCompte: public ::testing::Test{
public:
	unCompte():
		compte(4321, 2.6, 2000, "uneDescription")
	{}
	Compte compte;
};

TEST_F(unCompte, reqNoCompte()){
	ASSET_EQ(4321, compte.reqNoCompte());

}
