/**
 * \file CompteChequeTesteur.cpp
 * \brief
 * \author etudiant
 * \date 2018-04-06
 */

#include <gtest/gtest.h>
#include "Cheque.h"

/**
 * \test Test du constructeur
 * 		Cas valide: Creation d'un objet Cheque et verification de l'assignation de tous les attributs
 * 		Cas invalides:
 * 			nobre de transactions > 0
 * 			relation d'ordre taux interet minimum et taux interet non respectee
 */
TEST(Cheque, constructeurAvecParametresValides){
	Cheque monCheque(1234, 1.1, 1000, 22, 0.2, "mon cheque");
	ASSERT_EQ(22, monCheque.reqNombreTransactions());
	ASSERT_EQ(0.2, monCheque.reqTauxInteretMinimum());
}
//Cas invalide
TEST(Compte, ConstructeurAvecNombreDeTransactionSNonValide){    // test le nombre de transaction > 40
	ASSERT_THROW(Cheque monCheque(1234, 1.1, 1000, 44, 0.2, "mon cheque"), PreconditionException);
}


//Cas invalide
TEST(Compte, ConstructeurAvecTauxInteretMinimumNonValides){    // test le taux d'interet minimum > Taux d'interet
	ASSERT_THROW(Cheque monCheque(1234, 1.1, 1000, 22, 2.0, "mon cheque"), PreconditionException);
}

/**
 * \brief Creation d'une fixture a utiliser pour les methodes public de la class de test
 */

class monCheque: public ::testing::Test{
public:
	monCheque():
		cheque(1234, 1.1, 1000, 22, 0.2, "mon cheque")
	{}
	Cheque cheque;
};

TEST_F(monCheque, reqNombreTransactions){
	ASSERT_EQ(22, cheque.reqNombreTransactions());
}

TEST_F(monCheque, reqTauxInteretMinimum){
	ASSERT_EQ(0.2, cheque.reqTauxInteretMinimum());
}

TEST_F(monCheque, asgNombreTransactions){
	cheque.asgNombreTransactions(33);
	ASSERT_EQ(33, cheque.asgNombreTransactions());
}
